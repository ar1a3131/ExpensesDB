if you are creating a new react app container [like the already existing expensesdb] you need to do the following in volume1/[react folder]:

1. make the Dockerfile in the same directory as the code
########################example Dockerfile:##########################
# Use an official Node.js image as the base image
FROM node:14

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to install dependencies
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the React app for production
RUN npm run build

# Install a simple HTTP server to serve static files
RUN npm install -g serve

# Expose port 3000
EXPOSE 3000

# Serve the app on port 3000
CMD ["serve", "-s", "build", "-l", "3000"]
######################################################################

2. edit nginx.conf (i already did this, but including the step in case)
(have to be in the terminal for this)... cd .. out of volume1 and you should see the directory called etc,
the path for nginx.conf is /etc/nginx... might have to sudo chmod 777 nginx.conf before being able to edit
###############example of what to put into nginx.conf#############
server {
    listen 3000;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri /index.html;
    }
}
##################################################################


3. Build (make sure build folder is in there)
sudo docker build -t my-react-app .


4. set it up on that port number (these examples are using 3000)
sudo docker run -d -p 3000:3000 --name react-frontend my-react-app

