data_recovery

Volume Used for Data: The PostgreSQL data is stored in a Docker-managed volume:

"Name": "bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0",
"Source": "/volume1/@docker/volumes/bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0/_data",
"Destination": "/var/lib/postgresql/data",


This means the data directory (/var/lib/postgresql/data) in the container is mapped to a volume stored at /volume1/@docker/volumes/bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0/_data on the host.

Removing the container with sudo docker rm postgres-1 will not delete this volume. Docker-managed volumes persist unless explicitly removed.


.......................
Steps to Recover Data:
Verify the Volume Data: You can inspect the contents of the volume on the host to confirm your data (its not human readable, actually):
sudo ls /volume1/@docker/volumes/bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0/_data/base


Recreate the Container: If you remove the container, you can recreate it while re-attaching the volume:
sudo docker run --name postgres-1 \
    -e POSTGRES_USER=postgres \
    -e POSTGRES_PASSWORD=FergLib2024! \
    -v bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0:/var/lib/postgresql/data \
    -p 5432:5432 \
    -d postgres:latest
This will spin up a new container using the existing volume.



Export the Data (Optional): If you want to back up the data before making changes, you can use pg_dump:

docker exec -t postgres-1 pg_dumpall -U postgres > postgres_backup.sql



Remove the Volume (Only If Necessary): If you ever need to clean up the volume, you can list and remove it manually:

sudo docker volume ls
sudo docker volume rm bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0
..........................................................................................


type in:
sudo docker inspect [name of postgres container]


look for Mounts... will look something like: "Mounts": [
            {
                "Type": "volume",
                "Name": "bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0",
                "Source": "/volume1/@docker/volumes/bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0/_data",
                "Destination": "/var/lib/postgresql/data",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
            }
        ],

bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0 is the volume name

.............................................................................................

How PostgreSQL Gets the Data from a Directory
Directory Assigned During Docker Container Creation
When you run a docker run command with the -v option (or --mount), Docker mounts the specified host directory (or volume) into the container. For PostgreSQL, this is typically mounted to /var/lib/postgresql/data.

Example:
sudo docker run --name new-postgres-container \
    -e POSTGRES_USER=postgres \
    -e POSTGRES_PASSWORD=FergLib2024! \
    -v bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0:/var/lib/postgresql/data \
    -p 5432:5432 \
    -d postgres:latest
The -v bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0:/var/lib/postgresql/data part tells Docker to bind the host directory (/volume1/.../_data) to the container's expected data directory (/var/lib/postgresql/data).

..........................
this exact one worked (should be same as above...): 
sudo docker run --name postgres-container \
    -e POSTGRES_USER=postgres \
    -e POSTGRES_PASSWORD=FergLib2024! \
    -v /volume1/@docker/volumes/bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0/_data:/var/lib/postgresql/data \
    -p 5433:5432 \
    -d postgres:latest

____________________________________________________________________________________________________

Run pg_dump from the Host Machine: You can execute pg_dump to create a backup of your database.

bash
Copy code
sudo docker exec -t postgres-container pg_dump -U postgres -F c -b -v -f /var/lib/postgresql/data/backup.dump expensesdb
-F c: Custom format for compact backups.
-b: Includes large objects.
-v: Verbose output.
-f: Specifies the backup file.
_________________________________________________________________________
to back up database using pg_dump:

sudo docker stop postgres-container
sudo docker rm postgres-container
sudo docker run -d \
    --name postgres-container \
    --network expenses-network \
    -e POSTGRES_PASSWORD=FergLib2024! \
    -v /volume1/expensesdb_backup:/backups \
    -v /volume1/@docker/volumes/bb902df982e435b174e1688fa2889b975cdc62658e2cf1db9900b8a972b0e7e0/_data:/var/lib/postgresql/data \
    -p 5433:5432 \
    postgres:latest






